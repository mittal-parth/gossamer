// Copyright 2024 ChainSafe Systems (ON)
// SPDX-License-Identifier: LGPL-3.0-only

package runtime

import (
	"fmt"

	"github.com/ChainSafe/gossamer/pkg/scale"
)

// Digest item that is able to encode/decode 'system' digest items and
// provide opaque access to other items.
type DigestItemTypes interface {
	PreRuntime | Consensus | Seal | Other | RuntimeEnvironmentUpdated
}

// Digest item that is able to encode/decode 'system' digest items and
// provide opaque access to other items.
type DigestItem struct {
	inner any
}

// NewDigestItem is constructor for DigestItem
func NewDigestItem[T DigestItemTypes](value T) DigestItem {
	item := DigestItem{}
	setDigestItem(&item, value)
	return item
}

func setDigestItem[Value DigestItemTypes](mvdt *DigestItem, value Value) {
	mvdt.inner = value
}

func (mvdt *DigestItem) SetValue(value any) (err error) {
	switch value := value.(type) {
	case PreRuntime:
		setDigestItem(mvdt, value)
		return
	case Consensus:
		setDigestItem(mvdt, value)
		return
	case Seal:
		setDigestItem(mvdt, value)
		return
	case RuntimeEnvironmentUpdated:
		setDigestItem(mvdt, value)
		return
	case Other:
		setDigestItem(mvdt, value)
		return
	default:
		return fmt.Errorf("unsupported type")
	}
}

func (mvdt DigestItem) IndexValue() (index uint, value any, err error) {
	switch mvdt.inner.(type) {
	case Other:
		return 0, mvdt.inner, nil
	case Consensus:
		return 4, mvdt.inner, nil
	case Seal:
		return 5, mvdt.inner, nil
	case PreRuntime:
		return 6, mvdt.inner, nil
	case RuntimeEnvironmentUpdated:
		return 8, mvdt.inner, nil
	}
	return 0, nil, scale.ErrUnsupportedVaryingDataTypeValue
}

func (mvdt DigestItem) Value() (value any, err error) {
	_, value, err = mvdt.IndexValue()
	return
}

func (mvdt DigestItem) ValueAt(index uint) (value any, err error) {
	switch index {
	case 0:
		return Other{}, nil
	case 4:
		return Consensus{}, nil
	case 5:
		return Seal{}, nil
	case 6:
		return PreRuntime{}, nil
	case 8:
		return RuntimeEnvironmentUpdated{}, nil
	}
	return nil, scale.ErrUnknownVaryingDataTypeValue
}

func (mvdt DigestItem) String() string {
	return fmt.Sprintf("%s", mvdt.inner)
}

// A pre-runtime digest.
//
// These are messages from the consensus engine to the runtime, although
// the consensus engine can (and should) read them itself to avoid
// code and state duplication. It is erroneous for a runtime to produce
// these, but this is not (yet) checked.
//
// NOTE: the runtime is not allowed to panic or fail in an `on_initialize`
// call if an expected `PreRuntime` digest is not present. It is the
// responsibility of a external block verifier to check this. Runtime API calls
// will initialize the block without pre-runtime digests, so initialization
// cannot fail when they are missing.
type PreRuntime struct {
	ConsensusEngineID
	Bytes []byte
}

// A message from the runtime to the consensus engine. This should *never*
// be generated by the native code of any consensus engine, but this is not
// checked (yet).
type Consensus struct {
	ConsensusEngineID
	Bytes []byte
}

// Put a Seal on it. This is only used by native code, and is never seen
// by runtimes.
type Seal struct {
	ConsensusEngineID
	Bytes []byte
}

// Some other thing. Unsupported and experimental.
type Other []byte

// An indication for the light clients that the runtime execution
// environment is updated.
type RuntimeEnvironmentUpdated struct{}

// Digest is a header digest.
type Digest struct {
	// A list of logs in the digest.
	Logs []DigestItem
}

// Push new digest item.
func (d *Digest) Push(item DigestItem) {
	d.Logs = append(d.Logs, item)
}
